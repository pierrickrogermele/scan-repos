#!/bin/bash

##############
# PRINT HELP #
##############

function print_help {
	echo scan-repos [-h] [-g]
	echo -c  Enable checking of new commits for submodules. By default, it is disabled.
	echo -g  Debug mode.
	echo -h  Print this help message.
}

#############
# READ ARGS #
#############

function read_args {

	# Set default values
	g_debug=0

	while getopts "cfgh" flag ; do
		case $flag in
			h) print_help ; exit 0 ;;
			f) g_fetch=1 ;;
			g) g_debug=$((g_debug + 1)) ;;
			c) g_newcommits=1 ;;
		esac
	done
	shift $((OPTIND - 1))

	if [ -n "$*" ] ; then
		g_repos_path="$*"
	else
		# Replace by $REPOSPATH env var
		g_repos_path=$HOME/dev
	fi
}

###################
# PRINT DEBUG MSG #
###################

function print_debug_msg {

	dbglvl=$1
	dbgmsg=$2

	if [ $g_debug -ge $dbglvl ] ; then
		echo [DEBUG] $dbgmsg >&2
	fi
}

#####################
# PRINT WARNING MSG #
#####################

function print_warning_msg {

	warnmsg=$1

	echo $'\e[31m''[WARNING]'" $warnmsg"$'\e[0m' >&2
}

#########
# FETCH #
#########

function fetch {

	repospath=$1
	prevdir=$(pwd)
	quiet=--quiet
	if [ $g_debug -ge 1 ] ; then quiet= ; fi

	cd $repospath
	print_debug_msg 1 "Fetching $repospath ..."

	if ! git fetch --all $quiet 2>/dev/null ; then
		print_warning_msg "Can't fetch repository $repos."
	fi

	cd $prevdir
}

#############
# FETCH ALL #
#############

function fetch_all {

	repos_list_file=$1

	for rep in $(cat $repos_list_file) ; do
		fetch $rep
	done
}

##############
# LIST REPOS #
##############

function list_repos {

	path="$*"
	prevdir=$(pwd)

	for p in $path ; do
		if [ -e "$p/.git" ] ; then
			gitrepos=$p
		else
			gitrepos=$(ls -d $p/*/.git | sed 's/\/\.git//g')
		fi
		for repos in $gitrepos ; do
			echo $repos
			cd $repos
			git submodule foreach true | sed "s/^Entering '\(.*\)'$/\1/" | sed s@^@$repos/@
		done
	done

	cd $prevdir
}

########
# SCAN #
########

function scan {

	repospath=$1
	prevdir=$(pwd)
	repos_status_file=$(mktemp -t reposstatus.XXXXXX)
	msg=

	cd $repospath
	print_debug_msg 1 "Scanning $repospath ..."

	# Read repository's status
	if ! git status >$repos_status_file ; then
		print_warning_msg "Can't get status of repository $repospath."
	fi
	while read line ; do

		# Debug output
		print_debug_msg 2 "STATUS: $line"

		# Untracked files
		if [ -n "$(echo $line | grep '^Untracked files:')" ] ; then
			if [ -n "$msg" ] ; then msg="$msg, " ; fi
			msg=$msg$'\e[33m''untracked files'$'\e[0m'
		fi

		# Modified files
		if [ -n "$(echo $line | egrep '^Modified files:|Changes not staged for commit:')" ] ; then
			if [ -n "$msg" ] ; then msg="$msg, " ; fi
			msg=$msg$'\e[31m''modified files'$'\e[0m'
		fi

		# Branch is behind
		if [ -n "$(echo $line | grep 'branch is behind')" ] ; then
			if [ -n "$msg" ] ; then msg="$msg, " ; fi
			msg=$msg$'\e[32m''behind'$'\e[0m'
		fi

		# Branch is ahead
		if [ -n "$(echo $line | grep 'branch is ahead')" ] ; then
			if [ -n "$msg" ] ; then msg="$msg, " ; fi
			msg=$msg$'\e[34m''ahead'$'\e[0m'
		fi

	done <$repos_status_file

	# Print message if there is at least one reason
	if [ -n "$msg" ] ; then
		echo $repospath: ${msg}.
	fi

	cd $prevdir
}

############
# SCAN ALL #
############

function scan_all {

	repos_list_file=$1

	for rep in $(cat $repos_list_file) ; do
		scan $rep
	done
}

########
# MAIN #
########

read_args "$@"

repos_list_file=$(mktemp -t reposlist.XXXXXX)
curdir=$(pwd)

# List all repositories
list_repos $g_repos_path >$repos_list_file

# Fetch
if [ -n "$g_fetch" ] ; then fetch_all $repos_list_file ; fi

# Scan
scan_all $repos_list_file

# Loop on all repository paths
#for p in $REPOSPATH ; do
#
#	# List all repositories in current path
#	gitrepos=$(ls -d $p/*/.git | sed 's/\/\.git//g')
#
#	# Loop on all repositories
#	for repos in $gitrepos ; do
#
#		# Get repository name
#		reposname=$(basename $repos)
#
#		# Change repository's directory
#		cd $repos
#		print_debug_msg 1 "Looking at status of $repos ..."
#
#		# Read repository's status
#		git status | while read line ; do
#
#			# Debug output
#			print_debug_msg 2 "STATUS: $line"
#
#			# Untracked files
#			if [ -n "$(echo $line | grep '^Untracked files:')" ] ; then
#				echo $reposname': '$'\e[33m''untracked files'$'\e[0m''.'
#
#			# Modified files
#			elif [ -n "$(echo $line | grep '^Modified files:')" ] ; then
#				echo $reposname': '$'\e[31m''modified files'$'\e[0m''.'
#
#			# Branch is behind
#			elif [ -n "$(echo $line | grep 'branch is behind')" ] ; then
#				echo $reposname': '$'\e[32m''behind'$'\e[0m''.'
#
#			# Branch is ahead
#			elif [ -n "$(echo $line | grep 'branch is ahead')" ] ; then
#				echo $reposname': '$'\e[34m''ahead'$'\e[0m''.'
#
#			# Submodule modified
#			elif [ -n "$(echo $line | grep '^modified: ')" ] ; then
#				submodule=$(echo $line | sed 's/^modified: \(.*\) (.*$/\1/')
#				reason=$(echo $line | sed 's/^modified: .* (\(.*\))$/\1/')
#				nbreasons=0
#				msg="$reposname/$submodule: "
#
#				# New commits
#				if [ "$g_newcommits" = "1" -a -n "$(echo $reason | grep 'new commits')" ] ; then
#					msg="${msg}new commits"
#					nbreasons=$((nbreasons+1))
#				fi
#
#				# Modified content
#				if [ -n "$(echo $reason | grep 'modified content')" ] ; then
#					if [ $nbreasons -gt 0 ] ; then
#						msg="$msg, "
#					fi
#					msg=$msg$'\e[31m''modified content'$'\e[0m'
#					nbreasons=$((nbreasons+1))
#				fi
#
#				# Untracked content
#				if [ -n "$(echo $reason | grep 'untracked content')" ] ; then
#					if [ $nbreasons -gt 0 ] ; then
#						msg="$msg, "
#					fi
#					msg=$msg$'\e[33m''untracked content'$'\e[0m'
#					nbreasons=$((nbreasons+1))
#				fi
#
#				# Also each submodule which is only new-commits, must be checked if it is "ahead".
#				if [ "$reason" = "new commits" ] ; then
#					cd $submodule
#					ahead=$(git status | grep 'branch is ahead')
#					cd ..
#					if [ -n "$ahead" ] ; then
#						msg=$msg$'\e[34m''ahead'$'\e[0m'
#						nbreasons=$((nbreasons+1))
#					fi
#			fi
#		done # while loop on `git status` output.
#
#		# Go back to initial directory
#		cd $curdir
#	done
#done
