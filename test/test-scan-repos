#!/bin/bash

#############
# CONSTANTS #
#############

SCRIPTDIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
SCANREPOS=$SCRIPTDIR/../scan-repos

#########
# CHECK #
#########

function check {

	local testfct=$1
	shift

	# Run test
	echo -n $testfct "$@" ...
	test_output=$($testfct "$@" 2>&1)

	# Failure
	if [ $? -gt 0 ] ; then
		echo failure.
		echo $test_output
		exit 1
	fi

	# Success
	echo success. 
}

###########
# RUN GIT #
###########

function run_git {
	git "$@" >/dev/null 2>&1
}

###############
# CLEAN REPOS #
###############

function clean_repos {
	rm -rf repos-*
}


###################
# MAKE BARE REPOS #
###################

function mk_bare_repos {

	local repos=$1

	mkdir $repos
	cd $repos
	run_git init --bare
	cd ..
}

##############
# MAKE REPOS #
##############

function mk_repos {

	local repos="$1"
	local file="$2"

	mkdir "$repos"
	cd "$repos"
	touch "$file"
	run_git init
	run_git add .
	run_git commit -m "Init."
	cd ..
}

#####################
# MODIFY REPOS FILE #
#####################

function modify_repos_file {

	local repos=$1
	local file=$2

	cd $repos
	echo "AAA" >> $file
	run_git add .
	run_git commit -m "Add some text."
	cd ..
}

#####################
# DELETE REPOS FILE #
#####################

function delete_repos_file {

	local repos=$1
	local file=$2

	cd $repos
	rm $file
	run_git add .
	run_git commit -m "Removed file."
	cd ..
}

######################
# TEST MODIFIED FILE #
######################

function test_modified_file {
	clean_repos
	mk_repos repos-a a
	echo "AAA" >> repos-a/a
	$SCANREPOS repos-a > modified_file.output
	diff modified_file.output modified_file.output.ref >/dev/null
}

#####################
# TEST DELETED FILE #
#####################

function test_deleted_file {
	clean_repos
	mk_repos repos-a a
	rm repos-a/a
	$SCANREPOS repos-a > deleted_file.output
	diff deleted_file.output deleted_file.output.ref >/dev/null
}

#######################
# TEST UNTRACKED FILE #
#######################

function test_untracked_file {
	clean_repos
	mk_repos repos-a a
	touch repos-a/some_untracked_file.txt
	$SCANREPOS repos-a > untracked_file.output
	diff untracked_file.output untracked_file.output.ref >/dev/null
}

#####################
# TEST BRANCH AHEAD #
#####################

function test_branch_ahead {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos_file repos-clone a
	$SCANREPOS repos-clone > branch_ahead.output
	diff branch_ahead.output branch_ahead.output.ref >/dev/null
}

######################
# TEST BRANCH BEHIND #
######################

function test_branch_behind {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos_file repos-orig a
	cd repos-clone
	run_git fetch
	cd ..
	$SCANREPOS repos-clone > branch_behind.output
	diff branch_behind.output branch_behind.output.ref >/dev/null
}

##############
# TEST FETCH #
##############

function test_fetch {

	local flags=$1

	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos_file repos-orig a
	$SCANREPOS $flags repos-clone > fetch.output
	diff fetch.output branch_behind.output.ref >/dev/null
}

#############
# TEST PULL #
#############

function test_pull {

	local flags=$1

	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos_file repos-orig a
	$SCANREPOS $flags repos-clone > pull.output
	diff pull.output pull.output.ref >/dev/null
}

#############
# TEST PUSH #
#############

function test_push {

	local flags=$1

	clean_repos
	mk_bare_repos repos-bare
	mk_repos repos-orig a
	cd repos-orig
	run_git remote add origin ../repos-bare
	run_git push -u origin master
	cd ..
	modify_repos_file repos-orig a
	$SCANREPOS $flags repos-orig > push.output
	diff push.output push.output.ref >/dev/null
}

######################
# TEST PUSH CONFLICT #
######################

function test_push_conflict {

	local flags=$1

	# Create a bare repos and an orig repos
	clean_repos
	mk_bare_repos repos-bare
	mk_repos repos-orig a
	cd repos-orig
	run_git remote add origin ../repos-bare
	run_git push -u origin master
	cd ..

	# Clone orig repos
	run_git clone repos-orig repos-clone

	# Modify orig repos
	modify_repos_file repos-orig a
	$SCANREPOS $flags repos-orig > push_conflict_orig.output
	diff push_conflict_orig.output push.output.ref >/dev/null

	# Modify clone repos and try to push
	delete_repos_file repos-clone a
	$SCANREPOS $flags repos-clone >push_conflict_clone.output 2>&1
	diff push_conflict_clone.output push_conflict_clone.output.ref >/dev/null
}

######################
# TEST PUSH CONFLICT #
######################

function test_unknown_option {

	local flags=$1

	$SCANREPOS $flags >unknown_option.output 2>&1
	diff unknown_option.output unknown_option.output.ref >/dev/null
}

##################
# TEST REPOSPATH #
##################

function test_repospath {

	# Create a repository with a modified file
	clean_repos
	mk_repos repos-a a
	echo "AAA" >> repos-a/a

	# Outside repository
	$SCANREPOS repos-a > repospath_outside.output
	diff repospath_outside.output repospath_outside.output.ref >/dev/null

	# Outside repository with environment variable set to repository folder
	REPOSPATH=repos-a $SCANREPOS > repospath_outside_envvarrepos.output
	diff repospath_outside_envvarrepos.output repospath_outside.output.ref >/dev/null

	# Outside repository with environment variable set to relative current directory
	REPOSPATH=. $SCANREPOS > repospath_outside_envvarrelcur.output
	diff repospath_outside_envvarrelcur.output repospath_outside_envvarrelcur.output.ref >/dev/null

	# Outside repository with environment variable unset
	REPOSPATH= $SCANREPOS > repospath_outside_envvarunset.output
	diff repospath_outside_envvarunset.output repospath_outside_envvarrelcur.output.ref >/dev/null

	# Inside repository
	cd repos-a
	$SCANREPOS . > ../repospath_inside.output
	cd ..
	diff repospath_inside.output repospath_inside.output.ref >/dev/null

	# Inside repository with environment variable unset
	cd repos-a
	REPOSPATH= $SCANREPOS > ../repospath_inside_envvarunset.output
	cd ..
	diff repospath_inside_envvarunset.output repospath_inside.output.ref >/dev/null
}

#############################
# TEST MULTIPLE REPOS PATHS #
#############################

function test_multiple_repospaths {

	# Create two repositories with modified files
	clean_repos
	mk_repos repos-a a
	mk_repos repos-b b
	echo "AAA" >> repos-a/a
	echo "AAA" >> repos-b/b

	# Using command line
	$SCANREPOS repos-a repos-b >multiple_repospaths.output
	diff multiple_repospaths.output multiple_repospaths.output.ref >/dev/null

	# Using environment variable
	REPOSPATH=repos-a:repos-b $SCANREPOS >multiple_repospaths.output
	diff multiple_repospaths.output multiple_repospaths.output.ref >/dev/null

	# Using default current directory
	REPOSPATH= $SCANREPOS >multiple_repospaths_curdir.output
	diff multiple_repospaths_curdir.output multiple_repospaths_curdir.output.ref >/dev/null
}

##############
# TEST SPACE #
##############

function test_space {

	# Create arepository with a modified file
	clean_repos
	mk_repos "repos- a" a
	echo "AAA" >> "repos- a/a"

	$SCANREPOS "repos- a" > space.output 
	diff space.output space.output.ref >/dev/null
}

########
# MAIN #
########

check test_space
check test_unknown_option -z
check test_modified_file
check test_deleted_file
check test_untracked_file
check test_branch_ahead
check test_branch_behind
check test_repospath
check test_fetch -f
check test_fetch --fetch
check test_pull -b
check test_pull --pull
check test_push -a
check test_push --push
check test_push_conflict -a
check test_push_conflict --push
check test_multiple_repospaths
