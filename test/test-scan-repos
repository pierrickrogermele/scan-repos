#!/bin/bash

#############
# CONSTANTS #
#############

SCRIPTDIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
SCANREPOS=$SCRIPTDIR/../scan-repos

#########
# CHECK #
#########

function check {
	echo -n $1...
	if $1 ; then
		echo success. 
	else
		echo failure.
		exit 1
	fi
}

###########
# RUN GIT #
###########

function run_git {
	git "$@" >/dev/null 2>&1
}

###############
# CLEAN REPOS #
###############

function clean_repos {
	rm -rf repos-*
}


###################
# MAKE BARE REPOS #
###################

function mk_bare_repos {

	repos=$1

	mkdir $repos
	cd $repos
	run_git init --bare
	cd ..
}

##############
# MAKE REPOS #
##############

function mk_repos {

	repos=$1
	file=$2

	mkdir $repos
	cd $repos
	touch $file
	run_git init
	run_git add .
	run_git commit -m "Init."
	cd ..
}

################
# MODIFY REPOS #
################

function modify_repos {

	repos=$1
	file=$2

	cd $repos
	echo "AAA" >> $file
	run_git add .
	run_git commit -m "Add some text."
	cd ..
}

######################
# TEST MODIFIED FILE #
######################

function test_modified_file {
	clean_repos
	mk_repos repos-a a
	echo "AAA" >> repos-a/a
	$SCANREPOS repos-a > modified_file.output
	diff modified_file.output modified_file.output.ref >/dev/null
}

#####################
# TEST DELETED FILE #
#####################

function test_deleted_file {
	clean_repos
	mk_repos repos-a a
	rm repos-a/a
	$SCANREPOS repos-a > deleted_file.output
	diff deleted_file.output deleted_file.output.ref >/dev/null
}

#######################
# TEST UNTRACKED FILE #
#######################

function test_untracked_file {
	clean_repos
	mk_repos repos-a a
	touch repos-a/some_untracked_file.txt
	$SCANREPOS repos-a > untracked_file.output
	diff untracked_file.output untracked_file.output.ref >/dev/null
}

#####################
# TEST BRANCH AHEAD #
#####################

function test_branch_ahead {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos repos-clone a
	$SCANREPOS repos-clone > branch_ahead.output
	diff branch_ahead.output branch_ahead.output.ref >/dev/null
}

######################
# TEST BRANCH BEHIND #
######################

function test_branch_behind {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos repos-orig a
	cd repos-clone
	run_git fetch
	cd ..
	$SCANREPOS repos-clone > branch_behind.output
	diff branch_behind.output branch_behind.output.ref >/dev/null
}

##############
# TEST FETCH #
##############

function test_fetch {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos repos-orig a
	$SCANREPOS -f repos-clone > fetch.output
	diff fetch.output branch_behind.output.ref >/dev/null
}

#############
# TEST PULL #
#############

function test_pull {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos repos-orig a
	$SCANREPOS -b repos-clone > pull.output
	diff pull.output pull.output.ref >/dev/null
}

#############
# TEST PUSH #
#############

function test_push {
	clean_repos
	mk_bare_repos repos-bare
	mk_repos repos-orig a
	cd repos-orig
	run_git remote add origin ../repos-bare
	run_git push -u origin master
	cd ..
	modify_repos repos-orig a
	$SCANREPOS -a repos-orig > push.output
	diff push.output push.output.ref >/dev/null
}

########
# MAIN #
########

check test_modified_file
check test_deleted_file
check test_untracked_file
check test_branch_ahead
check test_branch_behind
check test_fetch
check test_pull
check test_push
