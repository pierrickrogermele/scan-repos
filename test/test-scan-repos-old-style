#!/bin/bash
# vi: fdm=marker

# CONSTANTS {{{1
################################################################

SCRIPTDIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
SCANREPOS=$SCRIPTDIR/../scan-repos

# RUNNING TESTS AND SCANREPOS {{{1
################################################################

# Check. Runs test function and checks returned code. {{{2
function check {

	local testfct=$1

	# Run test
	echo -n "$testfct ... "
	test_output=$($testfct 2>&1)

	# Failure
	if [ $? -gt 0 ] ; then
		echo failure.
		echo $test_output
		cd $ORIGWD
		exit 1
	fi

	# Success
	echo success. 
}

# Check same. Checks that two files have the same containt {{{2
function check_same {

	local file1=$1
	local file2=$2

	if [ -z "$file2" ] ; then
		file2=$file1
	fi
	file1=$file1.output
	file2=$file2.output.ref

	# Check files existence
	if [ ! -f "$file1" ] ; then
		echo "Cannot find file \"$file1\"." >&2
		return 1
	fi
	if [ ! -f "$file2" ] ; then
		echo "Cannot find file \"$file2\"." >&2
		return 1
	fi

	if ! diff $file1 $file2 >/dev/null ; then
		echo "Files $file1 and $file2 are different." >&2
		return 1
	fi

	return 0
}

# Run scanrepos {{{2
function run_scanrepos {

	local output_filename=$1
	shift

	$SCANREPOS "$@" >$output_filename.output 2>&1
}

# Check scanrepos output. {{{2
function check_scanrepos {

	local output_filename=$1

	run_scanrepos "$@" || return 1
	check_same $output_filename
}

# RUNNING GIT {{{1
################################################################

# Run git {{{2
function run_git {
	git "$@" >/dev/null 2>&1
}

# Clean repos {{{2
function clean_repos {
	rm -rf repos-*
}


# Make bare repos {{{2
function mk_bare_repos {

	local repos=$1

	mkdir $repos
	cd $repos
	run_git init --bare
	cd ..
}

# Make repos {{{2
function mk_repos {

	local repos="$1"
	local file="$2"

	mkdir "$repos"
	cd "$repos"
	touch "$file"
	run_git init
	run_git add .
	run_git commit -m "Init."
	cd ..
}

# Modify repos file {{{2
function modify_repos_file {

	local repos=$1
	local file=$2

	cd $repos
	echo "AAA" >> $file
	run_git add .
	run_git commit -m "Add some text."
	cd ..
}

# Delete repos file {{{2
function delete_repos_file {

	local repos=$1
	local file=$2

	cd $repos
	rm $file
	run_git add .
	run_git commit -m "Removed file."
	cd ..
}

# TEST MODIFIED FILE {{{1
################################################################

function test_modified_file {
	clean_repos
	mk_repos repos-a a
	echo "AAA" >> repos-a/a
	check_scanrepos modified_file repos-a || return 1
}

# TEST DELETED FILE {{{1
################################################################

function test_deleted_file {
	clean_repos
	mk_repos repos-a a
	rm repos-a/a
	check_scanrepos deleted_file repos-a || return 1
}

# TEST UNTRACKED FILE {{{1
################################################################

function test_untracked_file {
	clean_repos
	mk_repos repos-a a
	touch repos-a/some_untracked_file.txt
	check_scanrepos untracked_file repos-a || return 1
}

# TEST BRANCH AHEAD {{{1
################################################################

function test_branch_ahead {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos_file repos-clone a
	check_scanrepos branch_ahead repos-clone || return 1
}

# TEST BRANCH BEHIND {{{1
################################################################

function test_branch_behind {
	clean_repos
	mk_repos repos-orig a
	run_git clone repos-orig repos-clone
	modify_repos_file repos-orig a
	cd repos-clone
	run_git fetch
	cd ..
	check_scanrepos branch_behind repos-clone || return 1
}

# TEST FETCH {{{1
################################################################

function test_fetch {

	for flag in -f --fetch ; do
		clean_repos
		mk_repos repos-orig a
		run_git clone repos-orig repos-clone
		modify_repos_file repos-orig a
		run_scanrepos fetch $flag repos-clone || return 1
	done
}

# TEST FETCH ALL {{{1
################################################################

function test_fetch_all {

	for flag in -F --fetch-all ; do
		clean_repos

		# Create repos
		mk_repos repos-orig a

		# Clone orig repos and bare repos as another remote
		run_git clone repos-orig repos-clone
		cd repos-clone
		run_git remote add bare ../repos-bare
		cd ..

		# Modify orig repos and push modification into a new bare repos
		modify_repos_file repos-orig a
		mk_bare_repos repos-bare
		cd repos-orig
		run_git remote add origin ../repos-bare
		run_git push -u origin master
		cd ..

		# Modify again orig repos
		modify_repos_file repos-orig a

		# Fetch all modifications from all remotes inside clone repos
		check_scanrepos fetch_all $flag repos-clone || return 1

		# Check that all remotes have been fetched
		cd repos-clone
		pulled_all=$(git log --graph --pretty=format:%d --all | tr '\n' ' ' | grep 'origin/master.*bare/master.*HEAD.*master')
		[ -n "$pulled_all" ] || return 2
		cd ..

	done
}

# TEST PULL {{{1
################################################################

function test_pull {

	for flags in "-f -b" "-f --pull" "--fetch --pull" -fb; do
		clean_repos
		mk_repos repos-orig a
		run_git clone repos-orig repos-clone
		modify_repos_file repos-orig a
		check_scanrepos pull $flags repos-clone || return 1
	done
}

# TEST PUSH {{{1
################################################################

function test_push {

	for flag in -a --push ; do
		clean_repos
		mk_bare_repos repos-bare
		mk_repos repos-orig a
		cd repos-orig
		run_git remote add origin ../repos-bare
		run_git push -u origin master
		cd ..
		modify_repos_file repos-orig a
		check_scanrepos push $flag repos-orig || return 1
	done
}

# TEST PUSH CONFLICT {{{1
################################################################

function test_push_conflict {

	for flag in -a --push ; do
		# Create a bare repos and an orig repos
		clean_repos
		mk_bare_repos repos-bare
		mk_repos repos-orig a
		cd repos-orig
		run_git remote add origin ../repos-bare
		run_git push -u origin master
		cd ..

		# Clone orig repos
		run_git clone repos-orig repos-clone

		# Modify orig repos
		modify_repos_file repos-orig a
		run_scanrepos push_conflict_orig $flag repos-orig || return 1
		check_same push_conflict_orig push || return 1

		# Modify clone repos and try to push
		delete_repos_file repos-clone a
		check_scanrepos push_conflict_clone $flag repos-clone || return 1
	done
}

# TEST PUSH ALL {{{1
################################################################

function test_push_all {

	for flag in -A --push-all ; do

		# Clean
		clean_repos

		# Create repos
		mk_bare_repos repos-bare
		mk_repos repos-orig a

		# Push first time into bare repos
		cd repos-orig
		run_git remote add origin ../repos-bare
		run_git push -u origin master
		cd ..

		# Modify file (new commit)
		modify_repos_file repos-orig a

		# Create another branch
		cd repos-orig
		run_git checkout -b another_branch
		echo "ZAP" >b
		run_git add .
		run_git commit -m "Add new file"
		cd ..
		
		# TODO Test that when pushing normally, only the current branch is pushed.

		# Push all branches
		check_scanrepos push_all $flag repos-orig || return 1

		# Check that all branches have been pushed 
		cd repos-orig
		master_branch_is_pushed=$(git log --pretty=format:%d | grep 'master.*master')
		another_branch_is_pushed=$(git log --pretty=format:%d | grep 'another_branch.*another_branch')
		[ -n "$master_branch_is_pushed" -a -n "$another_branch_is_pushed" ] || return 2
		cd ..
	done
}

# TEST UNKNOWN OPTION {{{1
################################################################

function test_unknown_option {

	! run_scanrepos unknown_option -X || return 1
	check_same unknown_option || return 1
}

# TEST REPOSPATH {{{1
################################################################

function test_repospath {

	# Test an empty directory
	clean_repos
	mkdir repos-z
	check_scanrepos repospath_empty repos-z || return 1

	# Test an empty subdirectory
	clean_repos
	mk_repos repos-z a
	check_scanrepos repospath_empty_subdir repos-z || return 1

	# Create a repository with a modified file
	clean_repos
	mk_repos repos-a a
	echo "AAA" >> repos-a/a

	# Outside repository
	check_scanrepos repospath_outside repos-a || return 1

	# Outside repository with environment variable set to repository folder
	REPOSPATH=repos-a run_scanrepos repospath_outside_envvarrepos  || return 1
	check_same repospath_outside_envvarrepos repospath_outside || return 1

	# Outside repository with environment variable set to relative current directory
	REPOSPATH=. check_scanrepos repospath_outside_envvarrelcur  || return 1

	# Outside repository with environment variable unset
	REPOSPATH= run_scanrepos repospath_outside_envvarunset  || return 1
	check_same repospath_outside_envvarunset repospath_outside_envvarrelcur || return 1

	# Inside repository
	cd repos-a
	run_scanrepos ../repospath_inside . || return 1
	cd -
	check_same repospath_inside || return 1

	# Inside repository with environment variable unset
	cd repos-a
	REPOSPATH= run_scanrepos ../repospath_inside_envvarunset  || return 1
	cd -
	check_same repospath_inside_envvarunset repospath_inside || return 1
}

# TEST MULTIPLE REPOS PATHS {{{1
################################################################

function test_multiple_repospaths {

	# Create two repositories with modified files
	clean_repos
	mk_repos repos-a a
	mk_repos repos-b b
	echo "AAA" >> repos-a/a
	echo "AAA" >> repos-b/b

	# Using command line
	check_scanrepos multiple_repospaths repos-a repos-b  || return 1

	# Using environment variable
	REPOSPATH=repos-a:repos-b check_scanrepos multiple_repospaths  || return 1

	# Using default current directory
	REPOSPATH= check_scanrepos multiple_repospaths_curdir  || return 1
}

# TEST SPACE {{{1
################################################################

function test_space {

	# Create arepository with a modified file
	clean_repos
	mk_repos "repos- a" a
	mk_repos repos-a a
	echo "AAA" >> "repos- a/a"
	echo "AAA" >> repos-a/a

	# One repository with a space character
	check_scanrepos space "repos- a"  || return 1

	# Two repositories with one with a space character
	check_scanrepos space_2_repos "repos- a" repos-a  || return 1
}

# TEST SUBMODULES {{{1
################################################################

function test_submodules {

	# Create two repositories
	clean_repos
	mk_repos repos-a a
	mk_repos repos-b b
	modify_repos_file repos-a a

	# Add one repository as submodule of the other
	cd repos-b
	run_git submodule add ../repos-a
	run_git commit -m "Add submodule."
	echo "AAA" >> repos-a/a
	cd ..

	check_scanrepos submodules -s repos-b || return 1

	# Test submodules without initialization (not cloned)
	run_git clone repos-b repos-clone-b
	check_scanrepos submodules_noinit -s repos-clone-b || return 1
	check_scanrepos submodules_init -is repos-clone-b || return 1
	check_scanrepos submodules_detached -sd repos-clone-b || return 1       # detect detached head
}

# TEST RECURSIVE SUBMODULES {{{1
################################################################

function test_recursive_submodules {

	# Create three repositories
	clean_repos
	mk_repos repos-a a
	mk_repos repos-b b
	mk_repos repos-c c
	modify_repos_file repos-a a

	# Make c a submodule of b
	cd repos-b
	run_git submodule add ../repos-c
	run_git commit -m "Add submodule c."
	cd ..

	# Make b a submodule of a
	cd repos-a
	run_git submodule add ../repos-b
	run_git commit -m "Add submodule b."
	cd ..

	# Clone repos a
	run_git clone repos-a repos-clone-a
	check_scanrepos submodules_recursive_noinit -s repos-clone-a || return 1
	check_scanrepos submodules_recursive_init -is repos-clone-a || return 1
	check_scanrepos submodules_recursive_detached -sd repos-clone-a || return 1       # detect detached head
}

# TEST SUBMODULE NOTINIT {{{1
################################################################

function test_submodule_notinit {

	# Repos with detached head
	clean_repos
	mk_repos repos-a a
	mk_repos repos-b b
	cd repos-b
	run_git submodule add ../repos-a
	run_git commit -m "Add submodule."
	echo "AAA" >> repos-a/a
	cd ..
	run_git clone repos-b repos-clone-b
	check_scanrepos submodule_notinit -s repos-clone-b || return 1
}

# TEST TRACKING {{{1
################################################################

function test_tracking {

	# Simple repos
	clean_repos
	mk_repos repos-a a
	check_scanrepos no_tracking -t repos-a || return 1

	# Repos with detached head
	clean_repos
	mk_repos repos-a a
	mk_repos repos-b b
	cd repos-b
	run_git submodule add ../repos-a
	run_git commit -m "Add submodule."
	echo "AAA" >> repos-a/a
	cd ..
	run_git clone --recursive repos-b repos-clone-b
	check_scanrepos no_tracking_detached_head -std repos-clone-b || return 1
}

# TEST BRANCH NAME {{{1
################################################################

function test_branch_name {
	clean_repos
	mk_repos repos-a a
	echo "AAA" >> repos-a/a
	check_scanrepos branch_name -n repos-a || return 1
}


# MAIN {{{1
################################################################

cd $SCRIPTDIR
check test_fetch_all
check test_push_all
check test_branch_name
check test_submodule_notinit
check test_tracking
check test_recursive_submodules
check test_submodules
check test_repospath
check test_pull
check test_push
check test_push_conflict
check test_unknown_option
check test_modified_file
check test_deleted_file
check test_untracked_file
check test_branch_ahead
check test_branch_behind
check test_fetch
check test_multiple_repospaths
check test_space
cd $ORIGWD
